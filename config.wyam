
// This directive installs packages from NuGet and it what yuo would normally use
// NOTE: If running the example against a downloaded version of Wyam, uncomment this line and comment the next line
// #a **\*
/* */

// #n Wyam.All -s https://www.myget.org/F/wyam/api/v2?package=Wyam&prerelease
#n Wyam.All

#n jQuery -v [2.2.3]
#n bootstrap -v [3.3.6]


// Declaration code
using AngleSharp.Dom;
using AngleSharp.Dom.Html;
using AngleSharp.Extensions;
using AngleSharp.Parser.Html;
using IDocument = Wyam.Common.Documents.IDocument;


public static class AutoLinkHelper
{
	public static IEnumerable<string> GetKeywords(IDocument doc, params String[] keywords)
	{
		foreach (var keyword in keywords)
		{
			if(doc.Metadata.ContainsKey(keyword))
			{
				var metadata = doc[keyword];
				var strings = metadata as String[];
				if(strings != null)
					foreach (var s in strings)
						yield return s;
				else
					yield return metadata.ToString();
			}
		}
	}
	
	public static ILookup<string,IDocument> ToLookup(IExecutionContext ctx)
	{
		var erg = ctx.Documents
    .FromPipeline("renderOutput")  // Get documents from our current pipeline
    .Select(x =>  AutoLinkHelper.GetKeywords(x,"Title","Alias")
					.Select(y => new {Document = x, Keyword = y}))
	.SelectMany(x=>x)
	.ToLookup(x=> x.Keyword, x=> x.Document);
		return erg;
	}
	
	public static IDocument[] AddImageMetadata(IDocument doc, IExecutionContext ctx)
	{
			
		// Alle Documente mit Xmp data finden:
		var urlLookup = @ctx.Documents.FromPipeline("Write").Where(x=>x.ContainsKey("TargetUrl")).ToDictionary(x=> ((string)x["TargetUrl"]).Replace('\\','/'));
		
		
		var parser = new AngleSharp.Parser.Html.HtmlParser();
		//Source to be pared
		var source = @doc.Content;
		//Parse source to document
		var document = parser.Parse(source);
		//Do something with document like the following

		var images = document.QuerySelectorAll("img");
		foreach (var image in images)
		{			
			var url = image.GetAttribute("src");
			if(!urlLookup.ContainsKey(url))
				continue;	
			var imgDoc = urlLookup[url];
			String txt = "";
			String title = null;
			if(imgDoc.ContainsKey("RightsReserved"))
				title = (bool.Parse(imgDoc["RightsReserved"].ToString())? "Urheberrechlich Geschützt" :"Gemeinfrei");
			if(imgDoc.ContainsKey("Creator"))
				txt +=$"<h4>{imgDoc["Creator"]}</h4>";
			if(imgDoc.ContainsKey("Copyright"))
				txt +=$"<p>{imgDoc["Copyright"]}</p>";
			image.SetAttribute("data-toggle","popover");
			image.SetAttribute("data-html","true");
			image.SetAttribute("data-placement","auto");
			image.SetAttribute("data-trigger","click focus");
			if(title!=null)
				image.SetAttribute("title",title);
			image.SetAttribute("data-content", txt);
		}			
			
		return new IDocument[]{@ctx.GetDocument(doc, @ctx.GetContentStream(document.DocumentElement.OuterHtml))};	
	}


	public static IDocument[] AddClassToTable(IDocument doc, IExecutionContext ctx)
	{
		var parser = new AngleSharp.Parser.Html.HtmlParser();
		//Source to be pared
		var source = @doc.Content;
		//Parse source to document
		var document = parser.Parse(source);
		//Do something with document like the following

		var tables = document.QuerySelectorAll("table");
		foreach (var table in tables)
		{			
			var url = table.GetAttribute("class");
			if(!String.IsNullOrEmpty(url))
				continue;
			table.SetAttribute("class", "table");
		}			
			
		return new IDocument[]{@ctx.GetDocument(doc,@ctx.GetContentStream(document.DocumentElement.OuterHtml))};	
	}

	public static IDocument[] FixLink(IDocument doc, IExecutionContext ctx)
	{
		var parser = new AngleSharp.Parser.Html.HtmlParser();
		//Source to be pared
		var source = @doc.Content;
		//Parse source to document
		var document = parser.Parse(source);
		//Do something with document like the following

		var tables = document.QuerySelectorAll("a");
		foreach (var table in tables)
		{			
			var url = table.GetAttribute("href");

			if(String.IsNullOrEmpty(url))
				continue;

			var toSubstitude = new char[]{'ä','ö','ü','Ä','Ö','Ü','ß'};
			foreach(var c in toSubstitude)
			{
				var escapeString = Uri.HexEscape(c);
				url = url.Replace(c.ToString(),escapeString);
			}

			if(!Uri.IsWellFormedUriString(url, UriKind.Relative))
				continue;
			var extension = System.IO.Path.GetExtension(url);
			
			if(extension == ".cshtml"
			   || extension == ".md")
				url = System.IO.Path.ChangeExtension(url ,".html");


			table.SetAttribute("href", url);
		}			
			
		return new IDocument[]{@ctx.GetDocument(doc,@ctx.GetContentStream(document.DocumentElement.OuterHtml))};	
	}

	


}




public static class	Constants
{
	public static string ProjectName {get; }= "nota";

public static string SiteURL => GitBranch == "master" ? "nota-game.azurewebsites.net" : "nota-dev.azurewebsites.net";

	public static string GitUrl {get; }= Environment.GetEnvironmentVariable("GIT_URL")?? "https://github.com/LokiMidgard/nota";
	public static string GitBranch {get; }= Environment.GetEnvironmentVariable("GIT_BRANCH")?? "master";
	
	const string timeZoneZerilisation = "W. Europe Standard Time;60;(UTC+01:00) Amsterdam, Berlin, Bern, Rom, Stockholm, Wien;Mitteleuropäische Zeit;Mitteleuropäische Sommerzeit;[01:01:0001;12:31:9999;60;[0;02:00:00;3;5;0;];[0;03:00:00;10;5;0;];];";
	
	public static TimeZoneInfo TimeZone {get; } = TimeZoneInfo.FromSerializedString(timeZoneZerilisation); 
}

public static class Helper
{
	public static IModule TargetUrlModule()
	{
	return new Meta("RelativeFilePath",  (@doc, @ctx)=> 
	{
		var targetFile = (Wyam.Common.IO.FilePath)@doc["RelativeFilePath"];
		string url;
		if(targetFile.FileName.FullPath == "index.html")
			url = targetFile.Directory.FullPath;
		else
			url = targetFile.FullPath;			
		url = "\\"+url;
		url = url.Replace('\\','/');
		url = url.Replace("//","/");
		return new FilePath(url, PathKind.Relative);
	});		
	}

	public static IModule ChangeExtension(string newExtension)
	{
		return new Execute((@doc, @ctx)=> 
			{
				return new IDocument[] {@ctx.GetDocument(doc, doc.Source, new KeyValuePair<string, object>[]{new KeyValuePair<string, object>("RelativeFilePath",((FilePath)@doc["RelativeFilePath"]).ChangeExtension(newExtension))} )};
			});
	}

	public static bool IsExtension(IDocument document , string newExtension)
	{
		return ((FilePath)document["RelativeFilePath"]).Extension== newExtension;
	}


}



// Auf deutsche Kultur einstellen ( zur Compilezeit)
System.Globalization.CultureInfo.DefaultThreadCurrentCulture = System.Globalization.CultureInfo.GetCultureInfo("de-DE");
System.Globalization.CultureInfo.DefaultThreadCurrentUICulture = System.Globalization.CultureInfo.GetCultureInfo("de-DE");


IExecutionContext currentContext = null;

Pipelines.Add("books",
	ReadFiles(@"books\**\*.{*,!xsd,!meta}"),
	FrontMatter(Yaml()),
	Sidecar(Yaml()),
	DirectoryMeta()
		.WithMetadataFile(".inherited",true),
	/// ID for later reference in Replace ///
	Meta("ID",(@doc, @ctx)=> 
	{
		var path = (Wyam.Common.IO.FilePath)@doc["RelativeFilePath"];
		if(path.Directory.Name == path.FileNameWithoutExtension.ToString())
			return path.Directory.ToString();

		path = path.ChangeExtension("");

		return path.Directory.CombineFile(path.FileNameWithoutExtension).ToString();
	}),
	/// Neded for git modules and history ///
	Meta("OriginalSource", @doc.Source),

	/// XLSX ///
	If(@doc.Source.Extension==".xlsx",
		ExcelToCsv(),
		CsvToMarkdown() 
			.WithHeader(),
		Helper.ChangeExtension(".md")
	),

	/// XSLT ///
	If(@doc.Source.Extension==".xslt",
		Meta("src", @doc.Source),
		If(@doc.Metadata.ContainsKey("data"),
			Content(System.IO.File.ReadAllText((string)@doc["data"])),
			Xslt2(@doc["src"])
		).ElseIf(!@doc.Metadata.ContainsKey("data"),
			Trace("Faild data Metadata on"+ @doc.Source)
		),
		Helper.ChangeExtension(".md")
	), 


	Execute(context=> {currentContext = context;}),

	/// TODO: Replace  (including md files into another) ///
	If(@doc.Source.Extension==".md",
		Replace("§\"(?<id>[^\"]+)\"", match =>
		{
			var id = match.Groups["id"].Value;
			// var p = currentContext["books"];
//System.Linq.Enumerable.FirstOrDefault();

			var referencedDocument = currentContext.Documents.FromPipeline("books").FirstOrDefault(d=> d.Metadata.String("ID", null) == id);
var test = currentContext.Documents.FromPipeline("books").Select(d=> d.Metadata.String("ID", null));

			return referencedDocument?.Content ?? "[Error refference not found]";
		}
		
		)
	), 

	


	/// TODO: Filter Content that will not be shown (already included) ///

	/// BOOKS /// 
	If( @doc.Metadata.ContainsKey("BookType"),
		Meta("IsBook", true)
	),

	/// Adding Tree ///
	If(@doc.Metadata.Bool("hide", false)),
	Tree()
		.WithRoots(@doc.Get<bool>("IsBook"))
		.WithTreePath(((string)@doc["ID"]).Split(new char[] { '/' }, StringSplitOptions.RemoveEmptyEntries))
		.WithSort((x1,x2)=> x1.Get<int>("Order",int.MaxValue).CompareTo(x2.Get<int>("Order",int.MaxValue)))

);

Pipelines.Add("WriteMarkDown",
 	Documents("books"),
	WriteFiles( new DirectoryPath("MarkDown",PathKind.Relative).CombineFile((FilePath)@doc["RelativeFilePath"]))
);


/// TODO: HTML Pieplines ///

Pipelines.Add("MainMenue",
	ReadFiles(@"render\**\*.{*,!xsd,!meta}"),
	FrontMatter(Yaml()),
	Sidecar(Yaml()),
	DirectoryMeta()
		.WithMetadataFile(".inherited",true),
	Meta("RelativeFilePath",  (@doc, @ctx)=> 
	{
		var path = ((Wyam.Common.IO.DirectoryPath)"render").GetRelativePath((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]);
		return path;
	}),
	OrderBy(@doc.Metadata.Get<int>("Order",-1))
);


Pipelines.Add("htmlBooksPrepare",
	Documents("books"),
	If(@doc.Source != null,
		GitContributors()
			.ForEachInputDocument(),
		// Meta("RelativeFilePath",  (@doc, @ctx)=> 
		// {
		// 	var path = (Wyam.Common.IO.FilePath)@doc["RelativeFilePath"];
		// 	if(path.Directory.Name == path.FileNameWithoutExtension.ToString())
		// 		path = path.Directory.CombineFile("index" + path.Extension);
		// 	return path;
		// }),
		Meta("ReposetoryUrl",  (@doc, @ctx)=> 
		{
			//https://github.com/LokiMidgard/nota/edit/master/input/render/Downloads.md
			var url = $"{Constants.GitUrl}/edit/{Constants.GitBranch}/input/"+ ((Wyam.Common.IO.FilePath)@doc.Source).FullPath;
			return url;
		})
	)
);

Pipelines.Add("htmlBootstrap",
	ReadFiles(@"Scripts\**\*.*"),
	Concat(	
		ReadFiles(@"Content\**\*.*")
	),
	Concat(	
		ReadFiles(@"fonts\**\*.*")
	)
);

Pipelines.Add("htmlStatic",
	ReadFiles(@"static\**\*.*"),
	Meta("RelativeFilePath",  (@doc, @ctx)=> 
	{
		var path = ((Wyam.Common.IO.DirectoryPath)"static").GetRelativePath((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]);
		return path;
	}),
	Where(@doc.Source.Extension != ".xmp"),
	Xmp(errorsOnDoubleKeys:false)
		.WithMetadata("cc:license", "Copyright")
		.WithMetadata("xmpRights:UsageTerms", "Copyright")
		.WithMetadata("dc:rights", "Copyright")
		.WithMetadata("dc:creator", "Creator")
		.WithMetadata("cc:attributionName", "Creator")
		.WithMetadata("xmpRights:Marked", "RightsReserved"),
	If(((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]).Extension != ".css" 
			&& ((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]).Extension != ".js"
			&& ((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]).Extension != ".xsd"
			&& ((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]).Extension != ".xml"
			&& ((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]).Extension != ".config",
		If(@doc.Get<string>("RightsReserved")!= "False",
			If((!@doc.ContainsKey("Copyright"))
			 	|| !@doc.ContainsKey("Creator"),
				Trace($"Missing License Information {@doc.Source}"),
				Where((@doc,@ctx)=> false)
			)
		)
	),
	If(@doc.Source.Extension == ".xsd"||@doc.Source.Extension == ".xml",
		Replace("http://nota.org/", $"http://{Constants.SiteURL}/"),
		Replace("schemaLocation=\"", $"schemaLocation=\"http://{Constants.SiteURL}/schema/")
	)
);


Pipelines.Add("authorPages",
	GitContributors(),
	Meta("RelativeFilePath", @ctx.FileSystem.RootPath.Combine(@ctx.FileSystem.OutputPath).GetRelativePath( @ctx.FileSystem.RootPath.Combine(@ctx.FileSystem.OutputPath).Combine( new Wyam.Common.IO.DirectoryPath("author")).CombineFile((string)@doc["ContributorEmail"]+".html").ChangeExtension(".cshtml"))),
	Meta("Title", @doc["ContributorName"]),
	Meta("Layout", @"book.cshtml"),
	Content(
		ReadFiles(@"template\author.cshtml")		
	),
	ConcatBranch(
		Execute((@doc, @ctx)=>{
			var information = @doc["Commits"] as IEnumerable<IDocument>;
			
			var fileCommits = information
				.SelectMany(x=> (x["Entries"] as IReadOnlyDictionary<Wyam.Common.IO.FilePath, string>)
					.Select(entry => new { Entry = entry, Commit = x}))
				.GroupBy(x=>x.Entry.Key);
			return (IEnumerable<IDocument>) fileCommits.Select(x=>
			{
				var autherFolder = @ctx.FileSystem.RootPath.Combine(@ctx.FileSystem.OutputPath).Combine( new Wyam.Common.IO.DirectoryPath("author"));
				var emailFolder = autherFolder.Combine(new Wyam.Common.IO.DirectoryPath((string)@doc["ContributorEmail"]));
				var commitetFile = emailFolder.CombineFile(x.Key);
				var targetFile =  commitetFile.AppendExtension(".cshtml");
				targetFile = @ctx.FileSystem.RootPath.Combine(@ctx.FileSystem.OutputPath).GetRelativePath( targetFile );
				var commits = x.ToDictionary(y=> y.Commit, y=>y.Entry.Value).ToArray();				
				return @ctx.GetDocument(new KeyValuePair<string,object>[]
				{
					new KeyValuePair<string,object>("Title", x.Key.ToString()),
					new KeyValuePair<string,object>("ContributorName", @doc["ContributorName"]),
					new KeyValuePair<string,object>("ContributorEmail", @doc["ContributorEmail"]),
					new KeyValuePair<string,object>("ContributorSite", @doc["RelativeFilePath"]),
					new KeyValuePair<string,object>("RelativeFilePath", targetFile),
					new KeyValuePair<string,object>("Commits", commits),
					new KeyValuePair<string,object>("Path", x.Key),
				});				
			});
		}),
		Content(
			ReadFiles(@"template\CommitFile.cshtml")		
		)
	),
	Execute(new IDocument[]{ @ctx.GetDocument(doc,@ctx.FileSystem.RootPath.Combine(@ctx.FileSystem.OutputPath).CombineFile(  ((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]).ChangeExtension( ".cshtml")), @ctx.GetContentStream(@doc.Content))})
);

Pipelines.Add("convertAIFiles",
	ReadFiles(@"misc\documents\source\**\*.ai"),
	Meta("RelativeFilePath", ((DirectoryPath) @"downloads").CombineFile(((DirectoryPath) @"misc\documents\source").GetRelativePath( (FilePath)@doc["RelativeFilePath"]).ChangeExtension(".pdf")))
);


Pipelines.Add("htmlWrite",
	Documents("htmlBooksPrepare"),
	Concat(	
		Documents("htmlBootstrap")
	),
	Concat(	
		Documents("convertAIFiles")
	),
	Concat(	
		Documents("MainMenue")
	),
	Concat(	
		Documents("htmlStatic")
	),
	If(@doc.Source != null,
		GitContributors()
			.ForEachInputDocument(),
		Meta("ReposetoryUrl",  (@doc, @ctx)=> 
		{
			//https://github.com/LokiMidgard/nota/edit/master/input/render/Downloads.md
			var relativPath = @ctx.FileSystem.RootPath.Combine("input").GetRelativePath((Wyam.Common.IO.FilePath)@doc.Source);
			var url = $"{Constants.GitUrl}/edit/{Constants.GitBranch}/input/"+ relativPath.FullPath;
			return url;
		}),
		Meta("ReposetoryHistoryUrl",  (@doc, @ctx)=> 
		{
			//https://github.com/LokiMidgard/nota/commits/master/input/books/Regelwerke/Grundregeln/Grundregeln.md
			var relativPath = @ctx.FileSystem.RootPath.Combine("input").GetRelativePath((Wyam.Common.IO.FilePath)@doc.Source);
			var url = $"{Constants.GitUrl}/commits/{Constants.GitBranch}/input/"+ relativPath.FullPath;
			return url;
		})
	),
	Concat(	
		Documents("authorPages")
	),
	Where(!@doc.Metadata.Bool("hide", false)),
	Where(@doc.Source != null),
	If(Helper.IsExtension(@doc, ".md"),
		Markdown()
		 .UseExtensions(),
		// .UseConfiguration("DisableHtml")
		Helper.ChangeExtension(".cshtml")
	), 
	If(Helper.IsExtension(@doc, ".cshtml"),
		Razor().WithViewStart(@"layout/viewstart.cshtml"),
		Helper.ChangeExtension(".html")
	), 
	
	If(Helper.IsExtension(@doc, ".html"),
		// Execute(AutoLinkHelper.AddImageMetadata),
		Execute(AutoLinkHelper.AddClassToTable),
		Execute(AutoLinkHelper.FixLink),
		HtmlEscape().WithEscapedChar('ä','ö','ü','Ä','Ö','Ü','ß')
	),
	WriteFiles()
);



// 	If(@doc.Source.Extension==".md" 
// 			|| @doc.Source.Extension==".cshtml" 
// 			|| @doc.Source.Extension==".xslt" 
// 			|| @doc.Source.Extension==".xlsx" 
// 			|| @doc.Source.Extension==".xml",
// 		Razor().WithViewStart(@"layout/viewstart.cshtml"),
// 		Execute(AutoLinkHelper.AddClassToTable)
// 	),
// 	AutoLink((IDictionary<string,string>)AutoLinkHelper.ToLookup(@ctx)  // Use our new ToLookup extension
// 		.ToDictionary(x => x.Key, 
// 			x => (string)x.OrderBy(y=>y.ContainsKey("IsDisambigiusPage") ? 0 : 1).First()["TargetUrl"])  )
// 		.WithMatchOnlyWholeWord(),
// 	If(((Wyam.Common.IO.FilePath)@doc["TargetFile"]).Extension==".html",
// 		Execute(AutoLinkHelper.AddImageMetadata),
// 		HtmlEscape().WithEscapedChar('ä','ö','ü','Ä','Ö','Ü','ß')
// 	),
// 	Concat(
// 		Documents("staticOutput")
// 	),
	
// 	// Trace(@doc["TargetFile"]),
// 	WriteFiles( @doc["TargetFile"])
// );

/// TODO: PDF Pieplines ///

/// OLD

// Pipelines.Add("renderInput",
// 	ReadFiles(@"render\**\*.{*,!xsd,!meta}"),
// 	FrontMatter(Yaml()),
// 	Sidecar(Yaml()),
// 	GitContributors()
// 		.ForEachInputDocument(),
// 	DirectoryMeta()
// 		.WithMetadataFile(".inherited",true),
// 	Meta("TargetFile",  (@doc, @ctx)=> 
// 	{
// 		var path = ((Wyam.Common.IO.DirectoryPath)"render").GetRelativePath((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]);
// 		if(path.Directory.Name == path.FileNameWithoutExtension.ToString())
// 			path = path.Directory.CombineFile("index" + path.Extension);
// 		if(path.Extension == ".md" 
// 		|| path.Extension == ".cshtml"
// 		|| path.Extension == ".xslt"
// 		|| path.Extension == ".xlsx"
// 		|| path.Extension == ".xml")
// 			path= path.ChangeExtension(".html");
// 		return path;
// 	}),
// 	Helper.TargetUrlModule(),
// 	Meta("ReposetoryUrl",  (@doc, @ctx)=> 
// 	{
// 		//https://github.com/LokiMidgard/nota/edit/master/input/render/Downloads.md
// 		var url = $"{Constants.GitUrl}/edit/{Constants.GitBranch}/input/"+ ((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]).FullPath;
// 		return url;
// 	})
// );
 

// Pipelines.Add("staticInput",
// 	ReadFiles(@"static\**\*.*"),
// 	Meta("TargetFile",  (@doc, @ctx)=> 
// 	{
// 		var path = ((Wyam.Common.IO.DirectoryPath)"static").GetRelativePath((Wyam.Common.IO.FilePath)@doc["RelativeFilePath"]);
// 		return path;
// 	}),
// 	Helper.TargetUrlModule(),
// 	Where(@doc.Source.Extension != ".xmp"),
// 	Xmp(errorsOnDoubleKeys:false)
// 		.WithMetadata("cc:license", "Copyright")
// 		.WithMetadata("xmpRights:UsageTerms", "Copyright")
// 		.WithMetadata("dc:rights", "Copyright")
// 		.WithMetadata("dc:creator", "Creator")
// 		.WithMetadata("cc:attributionName", "Creator")
// 		.WithMetadata("xmpRights:Marked", "RightsReserved"),
// 	If(((Wyam.Common.IO.FilePath)@doc["TargetFile"]).Extension != ".css" 
// 			&& ((Wyam.Common.IO.FilePath)@doc["TargetFile"]).Extension != ".js"
// 			&& ((Wyam.Common.IO.FilePath)@doc["TargetFile"]).Extension != ".xsd"
// 			&& ((Wyam.Common.IO.FilePath)@doc["TargetFile"]).Extension != ".xml"
// 			&& ((Wyam.Common.IO.FilePath)@doc["TargetFile"]).Extension != ".config",
// 		If(@doc.Get<string>("RightsReserved")!= "False",
// 			If((!@doc.ContainsKey("Copyright"))
// 			 	|| !@doc.ContainsKey("Creator"),
// 				Trace($"Missing License Information {@doc.Source}"),
// 				Where((@doc,@ctx)=> false)
// 			)
// 		)
// 	),
// 	Replace("http://nota.org/", $"http://{Constants.SiteURL}/")
// );







// //  888888888888                                           ad88                                           
// //       88                                               d8"                                             
// //       88                                               88                                              
// //       88 8b,dPPYba, ,adPPYYba, 8b,dPPYba,  ,adPPYba, MM88MMM ,adPPYba,  8b,dPPYba, 88,dPYba,,adPYba,   
// //       88 88P'   "Y8 ""     `Y8 88P'   `"8a I8[    ""   88   a8"     "8a 88P'   "Y8 88P'   "88"    "8a  
// //       88 88         ,adPPPPP88 88       88  `"Y8ba,    88   8b       d8 88         88      88      88  
// //       88 88         88,    ,88 88       88 aa    ]8I   88   "8a,   ,a8" 88         88      88      88  
// //       88 88         `"8bbdP"Y8 88       88 `"YbbdP"'   88    `"YbbdP"'  88         88      88      88  

 
// Pipelines.Add("bootstrapOutput",
// 	ReadFiles(@"Scripts\**\*.*"),
// 	Concat(	
// 		ReadFiles(@"Content\**\*.*")
// 	),
// 	Concat(	
// 		ReadFiles(@"fonts\**\*.*")
// 	),
// 	Meta("TargetFile",  (@doc, @ctx)=> 
// 	{
// 		return @doc["RelativeFilePath"];
// 	})
// );


// Pipelines.Add("authorOutput",
// 	GitContributors(),
// 	Meta("TargetFile", @ctx.FileSystem.RootPath.Combine(@ctx.FileSystem.OutputPath).GetRelativePath( @ctx.FileSystem.RootPath.Combine(@ctx.FileSystem.OutputPath).Combine( new Wyam.Common.IO.DirectoryPath("author")).CombineFile((string)@doc["ContributorEmail"]+".html").ChangeExtension(".html"))),
// 	Meta("Title", @doc["ContributorName"]),
// 	Meta("Layout", @"book.cshtml"),
// 	Content(
// 		ReadFiles(@"template\author.cshtml")		
// 	),
// 	ConcatBranch(
// 		Execute((@doc, @ctx)=>{
// 			var information = @doc["Commits"] as IEnumerable<IDocument>;
			
// 			var fileCommits = information
// 				.SelectMany(x=> (x["Entries"] as IReadOnlyDictionary<Wyam.Common.IO.FilePath, string>)
// 					.Select(entry => new { Entry = entry, Commit = x}))
// 				.GroupBy(x=>x.Entry.Key);
// 			return (IEnumerable<IDocument>) fileCommits.Select(x=>
// 			{
// 				var autherFolder = @ctx.FileSystem.RootPath.Combine(@ctx.FileSystem.OutputPath).Combine( new Wyam.Common.IO.DirectoryPath("author"));
// 				var emailFolder = autherFolder.Combine(new Wyam.Common.IO.DirectoryPath((string)@doc["ContributorEmail"]));
// 				var commitetFile = emailFolder.CombineFile(x.Key);
// 				var targetFile =  commitetFile.AppendExtension(".html");
// 				targetFile = @ctx.FileSystem.RootPath.Combine(@ctx.FileSystem.OutputPath).GetRelativePath( targetFile );
// 				var commits = x.ToDictionary(y=> y.Commit, y=>y.Entry.Value).ToArray();				
// 				return @ctx.GetDocument(new KeyValuePair<string,object>[]
// 				{
// 					new KeyValuePair<string,object>("Title", x.Key.ToString()),
// 					new KeyValuePair<string,object>("ContributorName", @doc["ContributorName"]),
// 					new KeyValuePair<string,object>("ContributorEmail", @doc["ContributorEmail"]),
// 					new KeyValuePair<string,object>("ContributorSite", @doc["TargetFile"]),
// 					new KeyValuePair<string,object>("TargetFile", targetFile),
// 					new KeyValuePair<string,object>("Commits", commits),
// 					new KeyValuePair<string,object>("Path", x.Key),
// 				});				
// 			});
// 		}),
// 		Content(
// 			ReadFiles(@"template\CommitFile.cshtml")		
// 		)
// 	),
// 	Helper.TargetUrlModule(),
// 	Execute(new IDocument[]{ @ctx.GetDocument(doc,@ctx.FileSystem.RootPath.Combine(@ctx.FileSystem.OutputPath).CombineFile(  ((Wyam.Common.IO.FilePath)@doc["TargetFile"]).ChangeExtension( ".cshtml")),@doc.Content)})
// );
// Pipelines.Add("renderOutput",
// 	Documents("renderInput"),
// 	Concat(
// 		Execute((@ctx)=>
// 		{
// 			var ambigiusElements = AutoLinkHelper.ToLookup(@ctx).Where(x=> x.Skip(1).Any());
			
// 			var list = new List<IDocument>();
// 			foreach (var a in ambigiusElements)
// 			{

// 				list.Add(@ctx.GetDocument(
// 					@"\ambiguis\"+a.Key + ".cshtml",
// 					"",
// 					new KeyValuePair<string,object>[]{
// 					new KeyValuePair<string,object>("DisambigiusData", a),
// 					new KeyValuePair<string,object>("Keyword", a.Key),
// 					new KeyValuePair<string,object>("Alias", a.Key),
// 					new KeyValuePair<string,object>("Documents", a),
// 					new KeyValuePair<string,object>("IsDisambigiusPage", true),
// 				}));
// 			}
// 			return list;
// 		}),
// 		Meta("TargetFile",  new Wyam.Common.IO.DirectoryPath("ambiguis").CombineFile(@doc["Keyword"]+".html")),
// 		Meta("Title",  "begriffsklärung "+ @doc["Keyword"]),
// 		Helper.TargetUrlModule(),
// 		Content(
// 			ReadFiles(@"template\ambiguis.cshtml")
// 		)
// 	),

// 	/// XLSX ///
// 	If(@doc.Source.Extension==".xlsx",
// 	 	ExcelToCsv(),
// 		CsvToHtml()
// 		 .WithHeader()
// 	 ), 


// 	/// XSLT ///
// 		If(@doc.Source.Extension==".xslt",
// 		Meta("src", @doc.Source),
// 		If(@doc.Metadata.ContainsKey("data"),
// 			Content(System.IO.File.ReadAllText((string)@doc["data"])),
// 			Xslt2(@doc["src"])
// 		).ElseIf(!@doc.Metadata.ContainsKey("data"),
// 			Trace("Faild data Metadata on"+ @doc.Source)
// 		)
// 	), 
// 	/// BOOKS /// 
// 	If( @doc.Metadata.ContainsKey("BookType"),
// 		Meta("IsBook", true)
// 	),
// 	/// Adding Tree ///
// 	Tree()
// 		.WithRoots(@doc.Get<bool>("IsBook"))
// 		.WithTreePath(((string)@doc["TargetUrl"]).Split(new char[] { '/' }, StringSplitOptions.RemoveEmptyEntries))
// 		.WithSort((x1,x2)=> x1.Get<int>("Order",int.MaxValue).CompareTo(x2.Get<int>("Order",int.MaxValue))),

// 	Where(@doc.Source != null), // Removing generated Documents...
	
// 	Execute((ctx)=>{ // append to previous document
// 		var list = new List<IDocument>(ctx.Documents.FromPipeline("renderOutput"));
// 		bool foundAppend;
// do
// {
// foundAppend=false;
// 		for (int i = list.Count - 1; i >= 0 ; i--)
// 		{
// 			var doc = list[i];

// 			if(doc.Metadata.ContainsKey("append")
// 				&& bool.Parse(doc["append"].ToString()))
// 			{
// 				foundAppend=true;
// 				var nextDoc = doc;
// 				var docToAppend = nextDoc;
// 			do{
// 				docToAppend = nextDoc;
// 				nextDoc = docToAppend.Metadata.Get<IDocument>("Next");
				
// 			}while(nextDoc!=null
// 					&& nextDoc.Metadata.ContainsKey("append")
// 					&& bool.Parse(nextDoc["append"].ToString()));



// do{

// var docToAppendTo = docToAppend.Metadata.Get<IDocument>("Previous");
// if(docToAppendTo== null)
// break;

// 				var index = list.IndexOf(docToAppendTo);
// 				var newDoc = list[index] = ctx.GetDocument(docToAppendTo,docToAppendTo.Source, docToAppendTo.Content + "\n" + docToAppend.Content);

// 				list.Remove(docToAppend);
// 				docToAppend =newDoc;
// 			}while(docToAppend.Metadata.ContainsKey("append")
// 					&& bool.Parse(docToAppend["append"].ToString()));

// 					break;

// 			}

// }
// 		}while(foundAppend);

// 		return list;
// 	}),
	
// 	/// Adding Tree Againe ...///
// 	Tree()
// 		.WithRoots(@doc.Get<bool>("IsBook"))
// 		.WithTreePath(((string)@doc["TargetUrl"]).Split(new char[] { '/' }, StringSplitOptions.RemoveEmptyEntries))
// 		.WithSort((x1,x2)=> x1.Get<int>("Order",int.MaxValue).CompareTo(x2.Get<int>("Order",int.MaxValue))),

// 	/// Chapters ///
// 	If(@doc.Metadata.ContainsKey("Parent"),
// 		Meta("ParentBook", (@doc, @ctx)=>{
// 			var parent = @doc;
// 			while (parent.Get<IDocument>("Parent")!=null)
// 			{
// 				parent = parent.Get<IDocument>("Parent");
// 			}
// 			return parent;
// 		})
// 	)			
// );

// Pipelines.Add("staticOutput",
// 	Documents("staticInput")	
// );

// Pipelines.Add("output",
// 	Documents("renderOutput"),
// 	Concat(
// 		Documents("bootstrapOutput")
// 	),
// 	Concat(
// 		Documents("authorOutput")		
// 	)
// 	);

// //  88                                 88                                          
// //  88                                 88                                          
// //  88                                 88                                          
// //  88          ,adPPYba,   ,adPPYba,  88   ,d8 88       88 8b,dPPYba,  ,adPPYba,  
// //  88         a8"     "8a a8"     "8a 88 ,a8"  88       88 88P'    "8a I8[    ""  
// //  88         8b       d8 8b       d8 8888[    88       88 88       d8  `"Y8ba,   
// //  88         "8a,   ,a8" "8a,   ,a8" 88`"Yba, "8a,   ,a88 88b,   ,a8" aa    ]8I  
// //  88888888888 `"YbbdP"'   `"YbbdP"'  88   `Y8a `"YbbdP'Y8 88`YbbdP"'  `"YbbdP"'  
// //                                                          88                     
// //                                                          88                     



// Pipelines.Add("Books",
// 	Documents("renderOutput").Where(@doc.Get<bool>("IsBook")  )	
// );




// Pipelines.Add("MainMenue",
// 	Documents("output").Where( (@doc, @ctx)=> 
// 	{
// 		return @doc.Metadata.ContainsKey("MainMenueOrder");
// 	}),
// 	OrderBy(@doc["MainMenueOrder"])	
// );

// //  I8,        8        ,8I          88                    
// //  `8b       d8b       d8'          ""   ,d               
// //   "8,     ,8"8,     ,8"                88               
// //    Y8     8P Y8     8P 8b,dPPYba, 88 MM88MMM ,adPPYba,  
// //    `8b   d8' `8b   d8' 88P'   "Y8 88   88   a8P_____88  
// //     `8a a8'   `8a a8'  88         88   88   8PP"""""""  
// //      `8a8'     `8a8'   88         88   88,  "8b,   ,aa  
// //       `8'       `8'    88         88   "Y888 `"Ybbd8"'  
 

// Pipelines.Add("Write",
// 	Documents("output"),
// 	Where(@doc.Source != null),
// 	If(@doc.Source.Extension==".md",
// 		Markdown()
// 		 .UseExtensions()
// 		// .UseConfiguration("DisableHtml")
// 	), 
	

// 	If(@doc.Source.Extension==".md" 
// 			|| @doc.Source.Extension==".cshtml" 
// 			|| @doc.Source.Extension==".xslt" 
// 			|| @doc.Source.Extension==".xlsx" 
// 			|| @doc.Source.Extension==".xml",
// 		Razor().WithViewStart(@"layout/viewstart.cshtml"),
// 		Execute(AutoLinkHelper.AddClassToTable)
// 	),
// 	AutoLink((IDictionary<string,string>)AutoLinkHelper.ToLookup(@ctx)  // Use our new ToLookup extension
// 		.ToDictionary(x => x.Key, 
// 			x => (string)x.OrderBy(y=>y.ContainsKey("IsDisambigiusPage") ? 0 : 1).First()["TargetUrl"])  )
// 		.WithMatchOnlyWholeWord(),
// 	If(((Wyam.Common.IO.FilePath)@doc["TargetFile"]).Extension==".html",
// 		Execute(AutoLinkHelper.AddImageMetadata),
// 		HtmlEscape().WithEscapedChar('ä','ö','ü','Ä','Ö','Ü','ß')
// 	),
// 	Concat(
// 		Documents("staticOutput")
// 	),
	
// 	// Trace(@doc["TargetFile"]),
// 	WriteFiles( @doc["TargetFile"])
// );
